calendar_agent.py:5:from googleapiclient.discovery import build
calendar_agent.py:6:from googleapiclient.errors import HttpError
calendar_agent.py:7:from google.auth.transport.requests import Request
calendar_agent.py:8:from google_auth_oauthlib.flow import InstalledAppFlow
calendar_agent.py:23:            flow = InstalledAppFlow.from_client_secrets_file(
calendar_flask.py:3:from google.oauth2.credentials import Credentials
calendar_flask.py:5:from backend.event_creator import add_event_to_calendar
calendar_flask.py:9:    Create a calendar event from the provided event data.
calendar_flask.py:32:    start_datetime = datetime.datetime.fromisoformat(start_time)
calendar_handler.py:2:from google.oauth2.credentials import Credentials
calendar_handler.py:3:from googleapiclient.discovery import build
calendar_handler.py:4:from datetime import datetime, timedelta
calendar_inserter.py:3:from __future__ import print_function
calendar_inserter.py:5:from googleapiclient.discovery import build
calendar_inserter.py:6:from google.auth.transport.requests import Request
calendar_inserter.py:9:from auth import get_calendar_service
calendar_inserter.py:10:from backend.calendar_inserter import insert_event_to_calendar
calendar_manager.py:4:from datetime import datetime, timedelta
calendar_manager.py:5:from typing import Dict, List, Optional
calendar_manager.py:7:from google.oauth2.credentials import Credentials
calendar_manager.py:8:from googleapiclient.discovery import build
calendar_manager.py:9:from google.auth.transport.requests import Request
calendar_manager.py:25:                    self.credentials = Credentials.from_authorized_user_info(
calendar_manager.py:56:            start_time = datetime.fromisoformat(event_details['start_time'])
calendar_manager.py:57:            end_time = datetime.fromisoformat(event_details['end_time']) if 'end_time' in event_details else start_time + timedelta(hours=1)
calendar_manager.py:119:                    # Remove from pending events if successfully created
cli_event_review.py:1:from gmail_agent import GmailAgent, add_event_to_calendar
direct_test.py:3:from calendar_flask import create_calendar_event
event_creator.py:2:from backend.calendar_agent import get_calendar_service
event_creator.py:4:from googleapiclient.errors import HttpError
event_extractor.py:3:from datetime import datetime, timedelta
gmail_agent.py:4:from typing import Dict, List, Optional, Tuple
gmail_agent.py:5:from datetime import datetime, timedelta
gmail_agent.py:8:import nltk
gmail_agent.py:9:from nltk.tokenize import word_tokenize
gmail_agent.py:10:from nltk.corpus import stopwords
gmail_agent.py:12:from google.oauth2.credentials import Credentials
gmail_agent.py:13:from google_auth_oauthlib.flow import InstalledAppFlow
gmail_agent.py:14:from google.auth.transport.requests import Request
gmail_agent.py:15:from googleapiclient.discovery import build
gmail_agent.py:45:        # NLTK setup
gmail_agent.py:47:            nltk.data.find('tokenizers/punkt')
gmail_agent.py:49:            nltk.download('punkt')
gmail_agent.py:51:            nltk.data.find('corpora/stopwords')
gmail_agent.py:53:            nltk.download('stopwords')
gmail_agent.py:61:                    self.credentials = Credentials.from_authorized_user_info(
gmail_agent.py:69:                    flow = InstalledAppFlow.from_client_secrets_file(
gmail_agent.py:104:                sender = next((h['value'] for h in headers if h['name'] == 'From'), '')
gmail_agent.py:204:        creds = Credentials.from_authorized_user_file("credentials/token.json", ["https://www.googleapis.com/auth/calendar"])
gmail_agent.py:217:            "description": event.get("description", "Autogenerated from email"),
gmail_parser.py:5:from google.auth.transport.requests import Request
gmail_parser.py:6:from google_auth_oauthlib.flow import InstalledAppFlow
gmail_parser.py:7:from googleapiclient.discovery import build
gmail_parser.py:8:from email import message_from_bytes
gmail_parser.py:23:            flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_PATH, SCOPES)
gmail_parser.py:38:        mime_msg = message_from_bytes(msg_bytes)
gmail_scraper.py:3:from googleapiclient.discovery import build
gmail_scraper.py:4:from email import message_from_bytes
gmail_scraper.py:5:from bs4 import BeautifulSoup
gmail_scraper.py:12:    from google.oauth2.credentials import Credentials
gmail_scraper.py:16:        creds = Credentials.from_authorized_user_file(
gmail_scraper.py:25:    """Extract plaintext from MIME message."""
gmail_scraper.py:49:    parsed_date = dateparser.parse(event_line, settings={'PREFER_DATES_FROM': 'future'})
gmail_scraper.py:64:    Return a list of unread Gmail messages from the inbox.
macos_notifications.py:4:from typing import Dict, Optional
macos_notifications.py:5:from backend.macos_notifications import notify_event
macos_notifications.py:93:                # Remove from pending if notification was sent successfully
main.py:1:from flask import Flask, jsonify, request, render_template
main.py:2:from google.oauth2.credentials import Credentials
main.py:6:from datetime import datetime, timedelta
main.py:8:from flask import request
main.py:10:from backend.gmail_scraper import (
main.py:20:from backend.calendar_handler import (
main.py:26:from backend.calendar_flask import create_calendar_event
main.py:27:from backend.notifications import schedule_notifications
main.py:51:    creds = Credentials.from_authorized_user_file(
main.py:65:        events = scan_recent_messages()  # This function is your event extractor from Gmail
main.py:88:                subject = "Flagged Event from Email"
notifications.py:3:from threading import Thread
notifications.py:6:    from pync import Notifier
notifications.py:21:    from datetime import datetime, timedelta
scheduler.py:1:from apscheduler.schedulers.background import BackgroundScheduler
scheduler.py:2:from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
scheduler.py:29:    from backend.gmail_agent import scrape_and_process_gmail
simple_server.py:1:from flask import Flask, jsonify, request
